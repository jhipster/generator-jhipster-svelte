<%_
	const entityFakeData = generateFakeData('cypress');
	const containsBinaryField = fields.find(field => (field.fieldTypeBinary && !field.blobContentTypeText));
	const relationshipFields = relationships.filter(relationship => (
		relationship.otherEntity.primaryKey
			&& entityInstance !== relationship.otherEntity.entityInstance
			&& (relationship.relationshipManyToOne
				|| (relationship.relationshipOneToOne && relationship.ownerSide)
				|| (relationship.relationshipManyToMany && relationship.ownerSide))))
	const containsRelationshipField = relationshipFields && relationshipFields.length;
    const servicesApiPrefix = clientRootFolder !== '' ? 'services/' + clientRootFolder + '/' : '';
_%>
import { prepare<%= entityAngularName %>PrerequisiteData, add<%= entityAngularName %> } from "../../../<%= clientRootFolder !== '' ? '../' : '' %>support/entities/<%= entityFileName %>-util.js";

describe('<%= entityAngularName %> delete dialog page', () => {
	let dynamicId
<%_
	if (containsRelationshipField || containsBinaryField ) {
_%>

	before(() => {
		prepare<%= entityAngularName %>PrerequisiteData()
	})
<%_
		}
_%>

	before(function () {
		cy.loginByApi(
			Cypress.env('ADMIN_USERNAME'),
			Cypress.env('ADMIN_PASSWORD')
		)
		add<%= entityAngularName %>(<%_
	if (containsBinaryField) {
_%>this.binaryData<%_} _%><%_
	if (containsBinaryField && containsRelationshipField) {
_%>,<%_} _%><%_
		let fieldIndex = 0;
		const fieldLength = relationshipFields.length;
		for (const relationship of relationshipFields) {
			if (relationship.otherEntityUser) {
_%>this.user<%_ if (fieldIndex !== (fieldLength - 1)) { _%>,<%_ } _%><%_
			} else {
_%>this.<%= relationship.relationshipName %>Id<%_ if (fieldIndex !== (fieldLength - 1)) { _%>,<%_ } _%><%_
			}
			fieldIndex++;
		}
_%>)
		.then(res => {
			dynamicId = res.id
		})
	})

	beforeEach(() => {
		cy.unregisterServiceWorkers()
		cy.loginByApi(
			Cypress.env('ADMIN_USERNAME'),
			Cypress.env('ADMIN_PASSWORD')
		)
		cy.intercept('**/api/<%= entityApiUrl %>*').as('get<%= entityClassPlural %>')
		cy.visit('/entities/<%= entityFolderName %>')
		cy.wait('@get<%= entityClassPlural %>')
		// eslint-disable-next-line
		cy.wait(100)
		cy.getByTestId('<%= entityInstance %>Table')
		.get('td:nth-child(1)').each(($el, index, $list) => {
			const text = $el.text();
			if(text.includes(dynamicId)) {
				cy.getByTestId('<%= entityInstance %>Table')
					.get('td:nth-child(1)')
					.eq(index)
					.parent().within($tr => {
						cy.root().trigger('mouseenter', { force: true })
						cy.root().get('td').children().getByName('deleteBtn').click()
					})
			}
		})
	})

	after(function () {
		cy.delete(`<%= servicesApiPrefix %>api/<%= entityApiUrl %>/${dynamicId}`, true)
	<%_ if (authenticationType === 'oauth2') { _%>
		cy.logoutByApi()
	<%_ } _%>
	<%_
			for (const relationship of relationshipFields) {
				if (!relationship.otherEntityUser) {
	_%>
		cy.delete(`<%= servicesApiPrefix %>api/<%= relationship.otherEntity.entityApiUrl %>/${this.<%= relationship.relationshipName %>Id}`, true)
	<%_
				}
			}
	_%>
	})

	<%_ if (authenticationType === 'oauth2') { _%>
	afterEach(() => {
		cy.logoutByApi()
	})
	<%_ } _%>

	it('should display delete <%= entityAngularName %> dialog', () => {
		cy.getByTestId('svlModal').within(() => {
			cy.root()
				.get('h1')
				.should('be.visible')
				.should('contain', 'Confirm delete operation')
				.get('p')
				.should('be.visible')
				.should('contain', 'Are you sure you want to delete the <%= entityClassHumanized %>?')
				.getByName('confirmDeleteBtn')
				.should('not.be.disabled')
				.getByName('cancelBtn')
				.should('not.be.disabled')
		})
	})

	it('should close the dialog without deleting <%= entityAngularName %>', () => {
		cy.getByTestId('svlModal').within(() => {
			cy.getByName('cancelBtn').click()
		})
		cy.getByTestId('<%= entityInstance %>Title')
			.should('be.visible')
			.should('contain', '<%= entityClassPluralHumanized %>')
	})

	it('should delete the <%= entityAngularName %>', () => {
		cy.getByTestId('svlModal').within(() =>
			cy.getByName('confirmDeleteBtn').click()
		)
<%_ if (!reactive) { _%>

		cy.getByTestId('toast-success').contains(
			'is deleted with identifier'
		)

<%_ } _%>
		cy.getByTestId('<%= entityInstance %>Title')
			.should('be.visible')
			.should('contain', '<%= entityClassPluralHumanized %>')
	})
})
