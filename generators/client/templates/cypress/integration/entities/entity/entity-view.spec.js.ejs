<%_
	const entityFakeData = generateFakeData('cypress');
	const containsBinaryField = fields.find(field => (field.fieldTypeBinary && !field.blobContentTypeText));
	const relationshipFields = relationships.filter(relationship => (
		relationship.otherEntity.primaryKey
			&& entityInstance !== relationship.otherEntity.entityInstance
			&& (relationship.relationshipManyToOne
				|| (relationship.relationshipOneToOne && relationship.ownerSide)
				|| (relationship.relationshipManyToMany && relationship.ownerSide))))
	const relationshipFieldsWithSelfReferential = relationships.filter(relationship => (
		relationship.otherEntity.primaryKey
			&& (relationship.relationshipManyToOne
				|| (relationship.relationshipOneToOne && relationship.ownerSide)
				|| (relationship.relationshipManyToMany && relationship.ownerSide))))
	const containsRelationshipField = relationshipFields && relationshipFields.length;
    const servicesApiPrefix = clientRootFolder !== '' ? 'services/' + clientRootFolder + '/' : '';
_%>
import { prepare<%= entityAngularName %>PrerequisiteData, add<%= entityAngularName %> } from "../../../<%= clientRootFolder !== '' ? '../' : '' %>support/entities/<%= entityFileName %>-util.js";

describe('<%= entityAngularName %> view details page', () => {
	let dynamicId

<%_
	if (containsRelationshipField || containsBinaryField ) {
_%>

	before(() => {
		prepare<%= entityAngularName %>PrerequisiteData()
	})
<%_
		}
_%>

	before(function() {
		cy.loginByApi(
			Cypress.env('ADMIN_USERNAME'),
			Cypress.env('ADMIN_PASSWORD')
		)

		add<%= entityAngularName %>(<%_
	if (containsBinaryField) {
_%>this.binaryData<%_} _%><%_
	if (containsBinaryField && containsRelationshipField) {
_%>,<%_} _%><%_
		let fieldIndex = 0;
		const fieldLength = relationshipFields.length;
		for (const relationship of relationshipFields) {
			if (relationship.otherEntityUser) {
_%>this.user<%_ if (fieldIndex !== (fieldLength - 1)) { _%>,<%_ } _%><%_
			} else {
_%>this.<%= relationship.relationshipName %>Id<%_ if (fieldIndex !== (fieldLength - 1)) { _%>,<%_ } _%><%_
			}
			fieldIndex++;
		}
_%>)
		.then(res => {
			dynamicId = res.id
		})
	})

	beforeEach(() => {
		cy.unregisterServiceWorkers()
		cy.loginByApi(
			Cypress.env('ADMIN_USERNAME'),
			Cypress.env('ADMIN_PASSWORD')
		)
        cy.visit(`/entities/<%= entityFolderName %>/${dynamicId}/view`)
	})

	after(function () {
		cy.delete(`<%= servicesApiPrefix %>api/<%= entityApiUrl %>/${dynamicId}`)
	<%_ if (authenticationType === 'oauth2') { _%>
		cy.logoutByApi()
	<%_ } _%>
	<%_
			for (const relationship of relationshipFields) {
				if (!relationship.otherEntityUser) {
	_%>
		cy.delete(`<%= servicesApiPrefix %>api/<%= relationship.otherEntity.entityApiUrl %>/${this.<%= relationship.relationshipName %>Id}`, true)
	<%_
				}
			}
	_%>
	})

    <%_ if (authenticationType === 'oauth2') { _%>
    afterEach(() => {
        cy.logoutByApi()
    })
    <%_ } _%>

	it('should display <%= entityAngularName %> details', () => {
		cy.getByTestId('<%= entityInstance %>Title')
			.should('be.visible')
			.and('contain', `<%= entityClassHumanized %> Details`)

		cy.get('div.table').within(() => {
			cy.root()
				.get('.table-cell')
				.should('have.length', <%= (fields.length - 1) * 2 + (relationshipFieldsWithSelfReferential.length * 2) %>)
		})
	})

	it('should navigate back to the <%= entityAngularName %> list page', () => {
		cy.getByName('backBtn').click()
		cy.getByTestId('<%= entityInstance %>Title')
			.should('be.visible')
			.should('contain', '<%= entityClassPluralHumanized %>')
	})
})
