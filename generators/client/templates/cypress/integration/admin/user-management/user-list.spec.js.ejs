describe('User Management list page', () => {
	beforeEach(() => {
		cy.unregisterServiceWorkers()
		cy.loginByApi(Cypress.env('ADMIN_USERNAME'), Cypress.env('ADMIN_PASSWORD'))
		cy.visit('/admin/user-management')
	})

	it('should greets with users page title', () => {
		cy.getByTestId('userMgmtTitle')
			.should('be.visible')
			.should('contain', 'Users')
	})

	it('should display users table', () => {
		cy.getByTestId('userMgmtTable')
			.should('be.visible')
			.get('tr')
			.eq(0)
			.children()
			.should('have.length', 7)
			.get('th')
			.eq(0)
			.should('contain', 'ID')
			.get('th')
			.eq(1)
			.should('contain', 'Login')
			.get('th')
			.eq(2)
			.should('contain', 'Email')
			.get('th')
			.eq(3)
			.should('contain', 'Roles')
			.get('th')
			.eq(4)
			.should('contain', 'Created At')
			.get('th')
			.eq(5)
			.should('contain', 'Modified By')
			.get('th')
			.eq(6)
			.should('contain', 'Modified At')
	})

	it('should display "user" user record in the table', () => {
		cy.getByTestId('userMgmtTable')
			.contains('td', 'user@localhost')
			.parent().within($tr => {
				cy.get('td')
					.eq(1)
					.should('contain', 'user')
				cy.get('td')
					.eq(2)
					.should('contain', 'user@localhost')
				cy.get('td')
					.eq(3)
					.should('contain', 'ROLE_USER')
				cy.get('td')
					.eq(5)
					.should('contain', 'system')
			})
	})

	it('should not allow actions on the current logged in user', () => {
		cy.getByTestId('userMgmtTable')
			.contains('td', 'admin@localhost')
			.parent().within($tr => {
				cy.root().trigger('mouseenter')
				cy.get('td')
					.eq(6)
					.children()
					.getByName('toggleUserAcctBtn')
					.should('be.disabled')
					.getByName('viewBtn')
					.should('not.be.disabled')
					.getByName('editBtn')
					.should('be.disabled')
					.getByName('deleteBtn')
					.should('be.disabled')
			})
	})

	it('should allow deactivation of "user" account record', () => {
		cy.getByTestId('userMgmtTable')
			.contains('td', 'user@localhost')
			.parent().within($tr => {
				cy.root().trigger('mouseenter')
				cy.get('td')
					.eq(6)
					.children()
					.getByName('toggleUserAcctBtn')
					.should('not.be.disabled')
			})
	})

	it('should validate the pagination controls', () => {
		cy.getByTestId('pageCtrl')
			.eq(0)
			.contains('div', /1-\d+ of \d+/)
			.next()
			.within($div => {
				cy.root()
					.getByTestId('prevPageCtrl')
					.should('be.disabled')
					.get('div')
					.should('have.text', '1')
					.getByTestId('nextPageCtrl')
					.should('be.disabled')
			})
	})

	it('should sort the records by login field', () => {
		let loginValueBefore

		cy.getByTestId('userMgmtTable')
			.get('tbody>tr')
			.eq(0)
			.within($tr => {
				cy.root()
					.get('td')
					.eq(1)
					.invoke('text')
					.then(text => (loginValueBefore = text))
			})

		cy.intercept('**/admin/users?*').as('getUsers')

		cy.getByTestId('userMgmtTable')
			.get('tr')
			.eq(0)
			.within($tr => {
				cy.root()
					.get('th')
					.eq(1)
					.within($td => {
						cy.root().get('button').click()
					})
			})

		cy.wait('@getUsers')

		// eslint-disable-next-line
		cy.wait(100)

		cy.getByTestId('userMgmtTable')
			.get('tbody>tr')
			.eq(0)
			.within($tr => {
				cy.root()
					.get('td')
					.eq(1)
					.invoke('text')
					.then(text => {
						expect(text).not.eq(loginValueBefore)
					})
			})
	})
})
