<script>
	import { onMount } from 'svelte'
	import { goto } from '$app/navigation'
	import { faPlus } from '@fortawesome/free-solid-svg-icons'
	import { Button, Icon } from 'jhipster-svelte-library'
	import { DeleteModal, Page } from 'jhipster-svelte-library/page'
	import { PaginatedTable } from 'jhipster-svelte-library/table'

	import auth from '$lib/auth/auth-store'
	import userService from '$lib/admin/user-management/user-service'
	import UserTable from '$lib/admin/user-management/user-table.svelte'

	let error
	let users = []
	let sortPredicate = 'id'
	let sortOrder = 'asc'
	let pageSize = 15
	let page = 1
	let totalCount = 0
	let loading = true
	let showDeleteModal = false
	let userId = null

	onMount(() => fetchUsers())

	function fetchUsers() {
		loading = true
		error = undefined
		userService
			.fetchUserDetails(page, pageSize, sortPredicate, sortOrder)
			.then(res => {
				users = res.data
				totalCount = res.totalCount
			})
			.catch(err => (error = err))
			.finally((loading = false))
	}

	function toggleUserAccount(event) {
		userService
			.update(event.detail)
			.then(res => fetchUsers())
			.catch(err => (error = err))
	}

	function viewUserAccount(event) {
		goto(`/admin/user-management/${event.detail.id}/view`)
	}

	function updateUserAccount(event) {
		goto(`/admin/user-management/${event.detail.id}/edit`)
	}

	function showDeleteUserModal(event) {
		userId = event.detail.id
		showDeleteModal = true
	}

	function closeDeleteUserModal() {
		showDeleteModal = false
		userId = null
	}

	function deleteUserAccount() {
		userService
			.delete(userId)
			.then(() => fetchUsers())
			.catch(err => (error = err))
			.finally(() => (showDeleteModal = false), (userId = null))
	}

	function handleFetch(event) {
		// eslint-disable-next-line no-extra-semi
		;({ page, pageSize, sortPredicate, sortOrder } = event.detail)
		fetchUsers()
	}
</script>

<svelte:head>
	<title>Users</title>
	<meta name="Description" content="User list" />
</svelte:head>

<Page testId="userMgmt" width="full">
	<div
		class="text-left flex flex-row justify-between items-center"
		slot="header"
	>
		<span>Users</span>
		<div class="flex flex-row justify-end text-base">
			<Button
				classes="sm:my-0"
				on:click="{() => goto(`/admin/user-management/new`)}"
			>
				<Icon classes="mr-2" icon="{faPlus}" />
				Create user
			</Button>
		</div>
	</div>
	{#if !loading && users.length}
		{#if showDeleteModal}
            <DeleteModal
				id="{userId}"
				on:close="{closeDeleteUserModal}"
				on:delete="{deleteUserAccount}"
			>
				<svelte:fragment slot="confirm">
					Are you sure you want to delete the user?
				</svelte:fragment>
			</DeleteModal>
		{/if}

		<PaginatedTable
			component="{UserTable}"
			page="{page}"
			pageSize="{pageSize}"
			sortOrder="{sortOrder}"
			sortPredicate="{sortPredicate}"
			totalCount="{totalCount}"
			props="{{ users: users, currentUser: $auth }}"
			events="{['toggleuseraccount', 'view', 'update', 'delete']}"
			on:fetch="{handleFetch}"
			on:toggleuseraccount="{toggleUserAccount}"
			on:update="{updateUserAccount}"
			on:view="{viewUserAccount}"
			on:delete="{showDeleteUserModal}"
		/>
	{/if}
</Page>
