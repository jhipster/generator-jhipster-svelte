<%_
const relationshipFields = relationships.filter(relationship => (
	relationship.otherEntity.primaryKey
		&& (relationship.relationshipManyToOne
			|| (relationship.relationshipOneToOne && relationship.ownerSide)
			|| (relationship.relationshipManyToMany && relationship.ownerSide))))
const containsRelationshipField = relationshipFields && relationshipFields.length;
_%>
<script>
	import { goto } from '$app/navigation'
	import { Page } from 'jhipster-svelte-library/page'

	import <%= entityInstance %>Service from '$lib/entities/<%= entityFolderName %>/<%= entityFileName %>-service'
	import <%= entityAngularName %>Form from '$lib/entities/<%= entityFolderName %>/<%= entityFileName %>-form.svelte'
	<%_
	if(containsRelationshipField) {
	_%>
	import { onMount } from 'svelte'
	<%_ } _%>
	<%_ for (const relationship of relationships.filter(rel => rel.otherEntity.primaryKey)) {
	if (relationship.relationshipManyToOne
			|| (relationship.relationshipOneToOne && relationship.ownerSide)
			|| (relationship.relationshipManyToMany && relationship.ownerSide)) {
	_%>
	<%_ if (relationship.otherEntityUser) { _%>
	import userService from '$lib/entities/user/user-service'
	<%_ } else { _%>
	import <%= relationship.relationshipName %>Service from '$lib/entities/<%= clientRootFolder !== '' ? clientRootFolder + '/' : '' %><%= relationship.otherEntityFolderName %>/<%= relationship.otherEntityFileName %>-service'
	<%_ } _%>
	<%_
	}
	}
	_%>
	<%_
	if(containsRelationshipField) {
	_%>
	onMount(() => {
		<%_ for (const relationship of relationships.filter(rel => rel.otherEntity.primaryKey)) {
		if (relationship.relationshipManyToOne
				|| (relationship.relationshipOneToOne && relationship.ownerSide)
				|| (relationship.relationshipManyToMany && relationship.ownerSide)) {
		_%>
		fetch<%= relationship.relationshipNameCapitalizedPlural %>()
		<%_
		}
		}
		_%>
	})
	<%_ } _%>

	let error
	let <%= entityInstance %>
			<%_ for (const relationship of relationships.filter(rel => rel.otherEntity.primaryKey)) {
			if (relationship.relationshipManyToOne
					|| (relationship.relationshipOneToOne && relationship.ownerSide)
					|| (relationship.relationshipManyToMany && relationship.ownerSide)) {
			_%>
	let <%= relationship.relationshipNamePlural %>
	<%_
	}
	}
	_%>

	<%_ for (const relationship of relationships.filter(rel => rel.otherEntity.primaryKey)) {
	if (relationship.relationshipManyToOne
			|| (relationship.relationshipOneToOne && relationship.ownerSide)
			|| (relationship.relationshipManyToMany && relationship.ownerSide)) {
	_%>
	function fetch<%= relationship.relationshipNameCapitalizedPlural %>() {
		<%= relationship.relationshipName %>Service
			.findAll()
			.then(res => {
				if(res.data) {
					<%= relationship.relationshipNamePlural %> = res.data
				} else {
					<%= relationship.relationshipNamePlural %> = res
				}
			})
			.catch(err => (error = err))
	}
	<%_
	}
	}
	_%>

	function cancelSave() {
		goto(`/entities/<%= entityFolderName %>`)
	}

	function save<%= entityAngularName %>(event) {
		<%= entityInstance %>Service
			.create(event.detail)
			.then(() => goto(`/entities/<%= entityFolderName %>`))
			.catch(err => (error = err))
	}
</script>

<svelte:head>
	<title>Add <%= entityInstance %></title>
	<meta name="Description" content="Add <%= entityClassHumanized %>" />
</svelte:head>
<Page testId="<%= entityInstance %>">
	<div class="text-left" slot="header">Create <%= entityClassHumanized %></div>
	<<%= entityAngularName %>Form
		<%= entityInstance %>="{<%= entityInstance %>}"
		<%_ for (const relationship of relationships.filter(rel => rel.otherEntity.primaryKey)) {
		if (relationship.relationshipManyToOne
				|| (relationship.relationshipOneToOne && relationship.ownerSide)
				|| (relationship.relationshipManyToMany && relationship.ownerSide)) {
		_%>
		<%= relationship.relationshipNamePlural %>="{<%= relationship.relationshipNamePlural %>}"
		<%_
		}
		}
		_%>
		on:cancel="{cancelSave}"
		on:saveorupdate="{save<%= entityAngularName %>}"
	/>
</Page>
