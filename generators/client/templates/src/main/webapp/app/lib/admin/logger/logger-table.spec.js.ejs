<%_
	let mockFn
	if (this.jest) {
		mockFn = 'jest'
_%>
import { jest } from '@jest/globals'
<%_
	} else {
		mockFn = 'vi'
	}
_%>
import { fireEvent, render } from '@testing-library/svelte'
import { screen } from '@testing-library/dom'

import LoggerTable from './logger-table.svelte'

test('should render an empty table', () => {
	render(LoggerTable, {})

	expect(screen.getByRole('table')).toBeInTheDocument()
	expect(screen.queryAllByRole('cell').length).toEqual(1)
	expect(screen.getByText(/no loggers available/i)).toBeInTheDocument()
})

test('should render table with correct headers', () => {
	render(LoggerTable, {
		loggers: [],
		levels: [],
	})

	expect(screen.getByRole('table')).toBeInTheDocument()
	expect(screen.getByRole('columnheader')).toBeInTheDocument()
	expect(
		screen.getByRole('columnheader', { name: /name/i })
	).toBeInTheDocument()
})

test('should render table data for logger', () => {
	render(LoggerTable, {
		loggers: [
			{
				name: 'org.springframework',
				level: 'INFO'
			},
		],
		levels: ['WARN', 'INFO', 'DEBUG']
	})

	expect(screen.getByRole('cell', { name: /org.springframework/i })).toBeInTheDocument()
	expect(screen.getByRole('cell', { name: /INFO/i })).toBeInTheDocument()
	expect(screen.getByRole('button', { name: /INFO/i })).not.toHaveClass('hidden')
	expect(screen.getByRole('button', { name: /WARN/i })).toHaveClass('hidden')
	expect(screen.getByRole('button', { name: /DEBUG/i })).toHaveClass('hidden')
})

test('should assert the table reactivity to changed inputs', async () => {
	const { component } = render(LoggerTable, {
		loggers: [
			{
				name: 'org.springframework',
				level: 'INFO'
			},
		],
		levels: ['WARN', 'INFO', 'DEBUG']
	})

	expect(screen.getByRole('button', { name: /INFO/i })).not.toHaveClass('hidden')
	expect(screen.getByRole('button', { name: /WARN/i })).toHaveClass('hidden')

	await component.$set({
		loggers: [
			{
				name: 'org.springframework',
				level: 'WARN'
			},
		],
		levels: ['WARN', 'INFO', 'DEBUG']
	})

	expect(screen.getByRole('button', { name: /WARN/i })).not.toHaveClass('hidden')
	expect(screen.getByRole('button', { name: /INFO/i })).toHaveClass('hidden')
})

test('should not allow click event on the current selected logger level', () => {
	const { component } = render(LoggerTable, {
		loggers: [
			{
				name: 'org.springframework',
				level: 'INFO'
			},
		],
		levels: ['WARN', 'INFO', 'DEBUG']
	})

	expect(
		screen.getByRole('button', { name: /INFO/i })
	).toBeDisabled()
	expect(
		screen.getByRole('button', { name: /WARN/i })
	).toBeEnabled()
})

test('should dispatch the changeloglevel event', async () => {
	const { component } = render(LoggerTable, {
		loggers: [
			{
				name: 'org.springframework',
				level: 'INFO'
			},
		],
		levels: ['WARN', 'INFO', 'DEBUG']
	})
	const button = screen.getByRole('button', { name: /WARN/i })

	const mockHandler = <%= mockFn %>.fn()
	component.$on('changeloglevel', mockHandler)

	fireEvent.click(button)

	expect(mockHandler).toHaveBeenCalled()
	expect(mockHandler.mock.calls[0][0].detail).toStrictEqual({
		name: 'org.springframework',
		level: 'WARN',
	})
})
