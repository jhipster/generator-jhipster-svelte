<%_
	const entityFakeData = generateFakeData('cypress');
	const containsBinaryField = fields.find(field => (field.fieldTypeBinary && !field.blobContentTypeText));
	const relationshipFields = relationships.filter(relationship => (
		relationship.otherEntity.primaryKey
			&& entityInstance !== relationship.otherEntity.entityInstance
			&& (relationship.relationshipManyToOne
				|| (relationship.relationshipOneToOne && relationship.ownerSide)
				|| (relationship.relationshipManyToMany && relationship.ownerSide))))
	const containsRelationshipField = relationshipFields && relationshipFields.length;
	const oneToOneRelationship = relationshipFields.filter(relationship => relationship.relationshipOneToOne);
    const servicesApiPrefix = clientRootFolder !== '' ? 'services/' + clientRootFolder + '/' : '';
_%>
import { prepare<%= entityAngularName %>PrerequisiteData, add<%= entityAngularName %><% if (!paginationNo || searchEngineAny) { %>, add<%= entityAngularName %>2<% } %> } from "../../../<%= clientRootFolder !== '' ? '../' : '' %>support/entities/<%= entityFileName %>-util.js";

describe('<%= entityAngularName %> list page', () => {
	let dynamicId
<%_ if (!paginationNo || searchEngineAny) { _%>
	let dynamicId2
<%_ } _%>
<%_
	if (containsRelationshipField || containsBinaryField ) {
_%>
	before(() => {
		prepare<%= entityAngularName %>PrerequisiteData(<%= !!(!paginationNo || searchEngineAny) %>)
	})
<%_
		}
_%>

	before(function() {
		cy.loginByApi(
			Cypress.env('ADMIN_USERNAME'),
			Cypress.env('ADMIN_PASSWORD')
		)
	<%_ if (!paginationNo || searchEngineAny) { _%>
		// create another <%= entityAngularName %> to test sort implementation
		add<%= entityAngularName %>2(<%_
	if (containsBinaryField) {
_%>this.binaryData<%_} _%><%_
	if (containsBinaryField && containsRelationshipField) {
_%>,<%_} _%><%_
		let fieldIndex = 0;
		const fieldLength = relationshipFields.length;
		for (const relationship of relationshipFields) {
			if (relationship.otherEntityUser) {
_%>this.user<%_ if (fieldIndex !== (fieldLength - 1)) { _%>,<%_ } _%><%_
			} else {
_%>this.<%= relationship.relationshipName %>Id<%_ if (relationship.relationshipOneToOne) { _%>2<%_ } _%><%_ if (fieldIndex !== (fieldLength - 1)) { _%>,<%_ } _%><%_
			}
			fieldIndex++;
		}
_%>)
		.then(res => {
			dynamicId2 = res.id
		})
	<%_ } _%>

		add<%= entityAngularName %>(<%_
	if (containsBinaryField) {
_%>this.binaryData<%_} _%><%_
	if (containsBinaryField && containsRelationshipField) {
_%>,<%_} _%><%_
		let fieldIndex = 0;
		const fieldLength = relationshipFields.length;
		for (const relationship of relationshipFields) {
			if (relationship.otherEntityUser) {
_%>this.user<%_ if (fieldIndex !== (fieldLength - 1)) { _%>,<%_ } _%><%_
			} else {
_%>this.<%= relationship.relationshipName %>Id<%_ if (fieldIndex !== (fieldLength - 1)) { _%>,<%_ } _%><%_
			}
			fieldIndex++;
		}
_%>)
		.then(res => {
			dynamicId = res.id
		})
	})

	beforeEach(() => {
		cy.unregisterServiceWorkers()
		cy.loginByApi(
			Cypress.env('ADMIN_USERNAME'),
			Cypress.env('ADMIN_PASSWORD')
		)
        cy.intercept('**/api/<%= entityApiUrl %>*').as('get<%= entityClassPlural %>')
        cy.visit('/entities/<%= entityFolderName %>')
        cy.wait('@get<%= entityClassPlural %>')
        // eslint-disable-next-line
        cy.wait(100)
	})

	after(function() {
		cy.delete(`<%= servicesApiPrefix %>api/<%= entityApiUrl %>/${dynamicId}`)
<%_
	if (!paginationNo || searchEngineAny) {
_%>
		cy.delete(`<%= servicesApiPrefix %>api/<%= entityApiUrl %>/${dynamicId2}`)
<%_
	}
	if (authenticationType === 'oauth2') {
_%>
		cy.logoutByApi()
<%_
	}
_%>
	<%_
			for (const relationship of relationshipFields) {
				if (!relationship.otherEntityUser) {
	_%>
		cy.delete(`<%= servicesApiPrefix %>api/<%= relationship.otherEntity.entityApiUrl %>/${this.<%= relationship.relationshipName %>Id}`, true)
<%_
					if (relationship.relationshipOneToOne && (!paginationNo || searchEngineAny)) {
_%>
		cy.delete(`<%= servicesApiPrefix %>api/<%= relationship.otherEntity.entityApiUrl %>/${this.<%= relationship.relationshipName %>Id2}`, true)
<%_
					}
				}
			}
	_%>
	})

    <%_ if (authenticationType === 'oauth2') { _%>
    afterEach(() => {
        cy.logoutByApi()
    })
    <%_ } _%>

	it('should greets with <%= entityAngularName %> page title', () => {
		cy.getByTestId('<%= entityInstance %>Title')
			.should('be.visible')
			.should('contain', '<%= entityClassPluralHumanized %>')
	})

	it('should display <%= entityAngularName %> table', () => {
		cy.getByTestId('<%= entityInstance %>Table')
			.should('be.visible')
			.get('tr')
			.eq(0)
			.children()
<%_
	for (let loopIndex = 0; loopIndex > fields.length; loopIndex++) {
		const field = fields[loopIndex];
_%>
			.should('have.length', <%= fields.length %>)
			.get('th')
			.eq(<%= loopIndex %>)
			.should('contain', '<%= field.fieldNameHumanized %>')
<%_ } _%>
	})

	it('should display <%= entityAngularName %> record in the table', () => {
		cy.getByTestId('<%= entityInstance %>Table')
			.get('tbody tr')
			.eq(0)
			.within($tr => {
				cy.root()
<%_
	for (let loopIndex = 0; loopIndex > fields.length; loopIndex++) {
_%>
					.get('td')
					.eq(<%= loopIndex %>)
					.should('not.be.empty')
<%_ } _%>
			})
	})

<%_ if (!paginationNo) { _%>
	it('should validate the pagination controls', () => {
		cy.getByTestId('pageCtrl')
			.eq(0)
			.contains('div', /1-\d+ of \d+/)
			.next()
			.within($div => {
				cy.root()
					.getByTestId('prevPageCtrl')
					.should('be.disabled')
					.get('div')
					.should('have.text', '1')
					.getByTestId('nextPageCtrl')
					.should('be.disabled')
			})
	})

	it('should sort the records by Id field', () => {
		let valueBeforeSort

		cy.getByTestId('<%= entityInstance %>Table')
			.get('tbody>tr')
			.eq(0)
			.within($tr => {
				cy.root()
					.get('td')
					.eq(0)
					.invoke('text')
					.then(text => (valueBeforeSort = text))
			})

		cy.intercept('**/api/<%= entityApiUrl %>?*').as('get<%= entityClassPlural %>')

		cy.getByTestId('<%= entityInstance %>Table')
			.get('tr')
			.eq(0)
			.within($tr => {
				cy.root()
					.get('th')
					.eq(0)
					.within($td => {
						cy.root().get('button').click()
					})
			})

		cy.wait('@get<%= entityClassPlural %>')

		// eslint-disable-next-line
		cy.wait(100)

		cy.getByTestId('<%= entityInstance %>Table')
			.get('tbody>tr')
			.eq(0)
			.within($tr => {
				cy.root()
					.get('td')
					.eq(0)
					.invoke('text')
					.then(text => {
						expect(text).not.eq(valueBeforeSort)
					})
			})
	})
<%_ } _%>

<%_ if (searchEngineAny) { _%>
	it('should search the records by valid Id field', () => {
		let countBeforeSearch
		cy.getByTestId('<%= entityInstance %>Table')
			.get('tr')
			.then($tr => (countBeforeSearch = $tr.length))

		cy.intercept('**/api/_search/<%= entityApiUrl %>?*').as('search<%= entityClassPlural %>')

		cy.getByTestId('<%= entityInstance %>SearchForm').getByName('<%= entityInstance %>').type(`${dynamicId}{enter}`)

		cy.wait('@search<%= entityClassPlural %>')
		// eslint-disable-next-line
		cy.wait(100)

		cy.getByTestId('<%= entityInstance %>Table')
			.get('tr')
			.then($tr => expect($tr.length).not.eq(countBeforeSearch))

		cy.getByTestId('<%= entityInstance %>Table')
			.get('tbody>tr')
			.eq(0)
			.within($tr => {
				cy.root()
					.get('td')
					.eq(0)
					.invoke('text')
					.then(text => {
						expect(text).not.eq(dynamicId)
					})
			})
	})

	it('should search the records by invalid Id', () => {
		let countBeforeSearch
		cy.getByTestId('<%= entityInstance %>Table')
			.get('tr')
			.then($tr => (countBeforeSearch = $tr.length))

		cy.intercept('**/api/_search/<%= entityApiUrl %>?*').as('search<%= entityClassPlural %>')

		cy.getByTestId('<%= entityInstance %>SearchForm').getByName('<%= entityInstance %>').type(`99999999{enter}`)

		cy.wait('@search<%= entityClassPlural %>')
		// eslint-disable-next-line
		cy.wait(100)

		cy.getByTestId('<%= entityInstance %>Table')
			.get('tr')
			.then($tr => expect($tr.length).not.eq(countBeforeSearch))

		cy.getByTestId('<%= entityInstance %>Table')
			.get('tbody>tr')
			.eq(0)
			.within($tr => {
				cy.root()
					.get('td')
					.eq(0)
					.invoke('text')
					.then(text => {
						expect(text).eq('No <%= entityClassPluralHumanized %> found')
					})
			})
	})
<%_ } _%>
})
