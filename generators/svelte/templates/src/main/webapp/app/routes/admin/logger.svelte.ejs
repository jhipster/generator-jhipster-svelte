<script>
	import { onMount } from 'svelte'
	import { Page, SearchForm } from 'jhipster-svelte-library/page'
	import { PaginatedTable } from 'jhipster-svelte-library/table'

	import loggerService from '$lib/admin/logger/logger-service'
	import LoggerTable from '$lib/admin/logger/logger-table.svelte'

	let error
	let filterCriteria
	let page
	let loading = true
	let loggers = []
	let filteredLoggers = []
	let levels = []

	onMount(() => fetchLoggers())

	function fetchLoggers() {
		loading = true
		error = undefined
		loggerService
			.fetchLoggers()
			.then(res => {
				let response = JSON.parse(res)
				loggers = filteredLoggers = Object.entries(
					response.loggers
				).map(([key, logger]) => ({
					name: key,
					level: logger.effectiveLevel,
				}))
				if (filterCriteria) {
					filter(filterCriteria)
				}
				levels = response.levels
			})
			.catch(err => (error = err))
			.finally((loading = false))
	}

	function changeLogLevel(event) {
		loggerService
			.changeLogLevel(event.detail.name, event.detail.level)
			.then(res => fetchLoggers())
			.catch(err => (error = err))
	}

	function filterLoggers(event) {
		page = 1
		if (event.detail.criteria) {
			filterCriteria = event.detail.criteria
			filter(filterCriteria)
		} else {
			filterCriteria = undefined
			filteredLoggers = loggers
		}
	}

	function filter(criteria) {
		filteredLoggers = loggers.filter(logger =>
			logger.name.toLowerCase().includes(criteria.toLowerCase())
		)
	}

	function handlePageChange(event) {
		page = event.detail.page
	}
</script>

<svelte:head>
	<title>Loggers</title>
	<meta name="Description" content="Loggers list" />
</svelte:head>
<Page testId="loggers" width="full">
	<div
		class="text-left flex flex-row justify-between items-center"
		slot="header"
	>
		<span>Loggers</span>
		<div class="flex flex-row justify-end text-base">
			<SearchForm
				testId="logger"
				name="logger"
				isFilter="true"
				on:filter="{filterLoggers}"
			/>
		</div>
	</div>
	{#if !loading && loggers.length}
		<PaginatedTable
			clientSidePagination="true"
			paginationKey="loggers"
			page="{page}"
			component="{LoggerTable}"
			totalCount="{filteredLoggers.length}"
			props="{{ loggers: filteredLoggers, levels }}"
			events="{['changeloglevel']}"
			on:pagechange="{handlePageChange}"
			on:changeloglevel="{changeLogLevel}"
		/>
	{/if}
</Page>
