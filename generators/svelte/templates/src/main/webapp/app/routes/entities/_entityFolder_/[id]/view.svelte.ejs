<%_
const relationshipFields = relationships.filter(relationship => (
	relationship.otherEntity.primaryKey
		&& (relationship.relationshipManyToOne
			|| (relationship.relationshipOneToOne && relationship.ownerSide)
			|| (relationship.relationshipManyToMany && relationship.ownerSide))))
_%>
<script>
	import { onMount } from 'svelte'
	import { page } from '$app/stores'
	import { goto } from '$app/navigation'
	import { faArrowLeft } from '@fortawesome/free-solid-svg-icons'

	import <%= entityInstance %>Service from '$lib/entities/<%= entityFolderName %>/<%= entityFileName %>-service'
	import { Page, Record } from 'jhipster-svelte-library/page'
	import { Button, Icon } from 'jhipster-svelte-library'
<%_ const timedFieldType = fields.find(field => (field.fieldTypeTimed || field.fieldTypeLocalDate));
	const durationFieldType = fields.find(field => field.fieldTypeDuration);
	const bothTimedAndDuration = timedFieldType && durationFieldType;
	const binaryFieldType = fields.find(field => ((field.fieldTypeBinary && field.blobContentTypeImage) || (field.fieldTypeBinary && field.blobContentTypeAny)));
	if (timedFieldType || durationFieldType ) { _%>
	import { <%_ if (timedFieldType) { _%> formatDate<%_ } _%><%_ if (bothTimedAndDuration) { _%>, <%_ } else { _%> <%_ } _%><%_ if (durationFieldType) { _%> formatDurationType <%_ } _%> } from 'jhipster-svelte-library/utils'
<%_ }
	if (binaryFieldType) {
_%>
	import { BinaryRecord } from 'jhipster-svelte-library/page'
<%_ } _%>

	$: id = $page && $page.params && $page.params.id
	onMount(() => fetch<%= entityAngularName %>Details())

	let error
	let <%= entityInstance %>

	function fetch<%= entityAngularName %>Details() {
		error = undefined
		<%= entityInstance %>Service
			.findById(id)
			.then(res => (<%= entityInstance %> = res))
			.catch(err => (error = err))
	}
</script>

<svelte:head>
	<title><%= entityClassHumanized %> Details</title>
	<meta name="Description" content="<%= entityClassHumanized %> details" />
</svelte:head>
<Page testId="<%= entityInstance %>" width="full">
	<div class="text-left" slot="header"><%= entityClassHumanized %> Details</div>
	{#if <%= entityInstance %>}
		<div class="mt-4 table table-auto w-full">
<%_
	let isFirstRecord = true
	for (field of fields.filter(field => !field.id)) {
_%>
			<Record<% if(isFirstRecord) { %> classes="border-t"<% } %>>
				<span slot="label"><%= field.fieldNameHumanized %></span>
				<%_ if (field.fieldTypeBinary && field.blobContentTypeImage) { _%>
				<BinaryRecord
					field="{<%= entityInstance %>.<%= field.fieldName %>}"
					fieldContentType="{<%= entityInstance %>.<%= field.fieldName %>ContentType}"
					name="<%= field.fieldName %>"
					fieldType="image"
				/>
				<%_ } else if (field.fieldTypeBinary && field.blobContentTypeAny) { _%>
				<BinaryRecord
					field="{<%= entityInstance %>.<%= field.fieldName %>}"
					fieldContentType="{<%= entityInstance %>.<%= field.fieldName %>ContentType}"
					name="<%= field.fieldName %>"
				/>
				<%_ } else if (field.fieldTypeTimed || field.fieldTypeLocalDate) { _%>
				<span>{formatDate(<%= entityInstance %>.<%= field.fieldName %>)}</span>
				<%_ } else if (field.fieldTypeDuration) { _%>
				<span>{formatDurationType(<%= entityInstance %>.<%= field.fieldName %>)}</span>
				<%_ } else { _%>
				<span>{<%= entityInstance %>.<%= field.fieldName %>}</span>
				<%_ } _%>
			</Record>
<%_
		isFirstRecord = false
	}
_%>
<%_
	for (relationship of relationshipFields) {
_%>
			<Record>
				<span slot="label"><%= relationship.relationshipNameHumanized %></span>
			<%_ if (relationship.relationshipManyToMany) {_%>
				<span>{<%= entityInstance %>.<%= relationship.relationshipNamePlural %> ? <%= entityInstance %>.<%= relationship.relationshipNamePlural %>.map(el => el.<%= relationship.otherEntityField %>).join(', ') : '' }</span>
			<%_ } else { _%>
				<span>{<%=entityInstance %>.<%= relationship.relationshipName %> ? <%=entityInstance %>.<%= relationship.relationshipName %>.<%= relationship.otherEntityField %> : ''}</span>
			<%_ } _%>
			</Record>
<%_
	}
_%>
		</div>
	{/if}
	<div class="flex mt-4 flex-row justify-center items-center leading-none">
		<Button name="backBtn" on:click="{() => goto(`/entities/<%= entityFolderName %>`)}">
			<Icon classes="mr-2" icon="{faArrowLeft}" />
			Back
		</Button>
	</div>
</Page>
