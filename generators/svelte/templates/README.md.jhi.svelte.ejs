<%#
 Copyright 2013-2023 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
<%#
 This is a fragment file, it will be merged into to root template if available.
 EJS fragments will process % delimiter tags in template and & delimiter tags in the merge process.
-%>
<%_
let clientPackageMngrName = 'Npm';
let clientPackageMngrAddGlobal = 'install -g';
let clientPackageMngrAdd = 'install --save --save-exact';
let clientPackageMngrAddDev = 'install --save-dev --save-exact';
-%>
<&_ if (fragment.introSection) { -&>
This project uses Svelte frontend generated by `JHipster Svelte` v`<%= svelteBlueprintVersion %>` blueprint.

<&_ } -&>
<&_ if (fragment.developmentSection) { -&>
### Svelte frontend

Before you can build this project, you must install and configure the following dependencies on your machine:

1. [Node.js][]: We use Node to run a development web server and build the project.
   Depending on your system, you can install Node either from source or as a pre-packaged bundle.

After installing Node, you should be able to run the following command to install development tools.
You will only need to run this command when dependencies change in [package.json](package.json).

```
<%= clientPackageManager %> install
```

We use <%= clientPackageManager %> scripts and [Vite](https://vitejs.dev/) as our build system.

Run the following commands in two separate terminals to create a blissful development experience where your browser
auto-refreshes when files change on your hard drive.

```sh
<%_ if (!skipServer) { _%>
     <%_ if (buildTool === 'maven') { _%>
./mvnw
     <%_ } _%>
     <%_ if (buildTool === 'gradle') { _%>
./gradlew
     <%_ } _%>
<%_ } _%>
<%= clientPackageManager %> start
```

<%= clientPackageMngrName %> is also used to manage CSS and JavaScript dependencies used in this application. You can upgrade dependencies by
specifying a newer version in [package.json](package.json). You can also run `<%= clientPackageManager %> update` and `<%= clientPackageManager %> install` to manage dependencies.
Add the `help` flag on any command to see how you can use it. For example, `<%= clientPackageManager %> help update`.

The `<%= clientPackageManager %> run` command will list all the scripts available to run for this project.

### Managing dependencies

When using Svelte components installed from npm, such as [@sveltejs/svelte-virtual-list](https://github.com/sveltejs/svelte-virtual-list), Svelte needs the original component source (rather than any precompiled JavaScript that ships with the component). This allows the component to be rendered server-side, and also keeps your client-side app smaller.

Because of that, it's essential that the bundler doesn't treat the package as an _external dependency_. We recommend you to install the package to `devDependencies`, which will cause it to get bundled (and therefore compiled) with your app:

```bash
<%= clientPackageManager %> <%= clientPackageMngrAdd %> -D @sveltejs/svelte-virtual-list
```

For further instructions on how to develop with JHipster and SvelteKit, have a look at [Using JHipster in development][] and [kit.svelte.dev](https://kit.svelte.dev/).

<&_ } -&>
<&_ if (fragment.testingSection) { -&>
### Svelte tests

Unit tests are run by [Jest][]. They're located alongside components and can be run with:

```
npm test
```

UI end-to-end tests are powered by [Cypress][]. They're located under cypress directory and can be run by starting Spring Boot in one terminal (`./mvnw spring-boot:run`) and running the tests (`npm run e2e`) in a second one.

<&_ } -&>
<&_ if (fragment.referenceSection) { -&>
[Jest]: https://facebook.github.io/jest/
[Cypress]: https://www.cypress.io/
<&_ } -&>
