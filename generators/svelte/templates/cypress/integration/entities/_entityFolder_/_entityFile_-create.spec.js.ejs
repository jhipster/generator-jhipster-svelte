<%_
	const entityFakeData = generateFakeData('cypress');
	const containsBinaryField = fields.find(field => (field.fieldTypeBinary && !field.blobContentTypeText));
	const containsMandatoryField = fields.find(field => field.fieldValidationRequired);
	const containsFieldValidation = containsMandatoryField || fields.find(field => (field.fieldValidationMinLength
			|| field.fieldValidationMaxLength
			|| field.fieldValidationMin
			|| field.fieldValidationMax
			|| (!field.fieldValidationRequired && field.fieldTypeNumeric)));
	const placeHolderText = 'lorem ipsum';
	const getMinLengthText = function(len) {
		return placeHolderText.substr(0, len > 1 ? len-1 : 0);
	}
	const getMaxLengthText = function(len) {
		let maxLengthText = placeHolderText;
		while(maxLengthText.length < len) {
			maxLengthText+= placeHolderText;
		}
		return maxLengthText;
	}
_%>
describe('Create <%= entityInstance %> page', () => {
	beforeEach(() => {
		cy.unregisterServiceWorkers()
		cy.loginByApi(
			Cypress.env('ADMIN_USERNAME'),
			Cypress.env('ADMIN_PASSWORD')
		)
		cy.visit('/entities/<%= entityFolderName %>/new')
	})

	it('should greets with Create <%= entityInstance %> title', () => {
		cy.getByTestId('<%= entityInstance %>Title')
			.should('be.visible')
			.should('contain', 'Create <%= entityClassHumanized %>')
	})

<%_ if (containsMandatoryField) { _%>
	it('should require mandatory fields', () => {
		cy.getByTestId('add<%= entityAngularName %>Form')
			.contains('Create <%= entityClassHumanized %>')
			.should('be.disabled')
	})

<%_ } _%>
<%_ if (containsFieldValidation) { _%>
	it('should validate field values', () => {
<%_
		for (field of fields.filter(field => !field.id)) {
			const fieldValue = !entityFakeData ? field.generateFakeData('cypress') : entityFakeData[field.fieldName];
			if (fieldValue === undefined) {
				warning(`Error generating a value for field ${field.fieldName}`);
			}
_%>
	<%_ if (field.fieldValidationRequired) { _%>
		cy.getByTestId('add<%= entityAngularName %>Form').within(() => {
			cy.getByName('<%= field.fieldName %>').within(() => {
				cy.root().type('<%= fieldValue %>')
				cy.root().clear()
				cy.root().blur()
			})
			cy.getByTestId('<%= field.fieldName %>-error')
			.should('be.visible')
			.and('contain', '<%= field.fieldNameHumanized %> is mandatory')
		})
	<%_ } _%>
	<%_ if (field.fieldValidationMinLength) { _%>

		cy.getByTestId('add<%= entityAngularName %>Form').within(() => {
			cy.getByName('<%= field.fieldName %>').within(() => {
				cy.root().type(
					'<%= getMinLengthText(field.fieldValidateRulesMinlength) %>'
				)
				cy.root().blur()
			})
			cy.getByTestId('<%= field.fieldName %>-error')
			.should('be.visible')
			.and('contain', '<%= field.fieldNameHumanized %> should be greater than <%= field.fieldValidateRulesMinlength %> characters')
		})
	<%_ } _%>
	<%_ if (field.fieldValidationMaxLength) { _%>

		cy.getByTestId('add<%= entityAngularName %>Form').within(() => {
			cy.getByName('<%= field.fieldName %>').within(() => {
				cy.root().type(
					'<%= getMaxLengthText(field.fieldValidateRulesMaxlength) %>'
				)
				cy.root().blur()
			})
			cy.getByTestId('<%= field.fieldName %>-error')
			.should('be.visible')
			.and('contain', '<%= field.fieldNameHumanized %> cannot be longer than <%= field.fieldValidateRulesMaxlength %> characters')
		})
	<%_ } _%>
	<%_ if (field.fieldTypeNumeric && !field.fieldValidationRequired) { _%>

		cy.getByTestId('add<%= entityAngularName %>Form').within(() => {
			cy.getByName('<%= field.fieldName %>').within(() => {
				cy.root().type('1')
				cy.root().clear()
				cy.root().type('-')
				cy.root().blur()
			})
			cy.getByTestId('<%= field.fieldName %>-error')
			.should('be.visible')
			.and('contain', '<%= field.fieldNameHumanized %> should be numeric')
		})
	<%_ } _%>
	<%_ if (field.fieldTypeNumeric && field.fieldValidationMin) { _%>

		cy.getByTestId('add<%= entityAngularName %>Form').within(() => {
			cy.getByName('<%= field.fieldName %>').within(() => {
				cy.root().type(
					'<%= Number(field.fieldValidateRulesMin) - 1 %>'
				)
				cy.root().blur()
			})
			cy.getByTestId('<%= field.fieldName %>-error')
			.should('be.visible')
			.and('contain', '<%= field.fieldNameHumanized %> should be at least <%= field.fieldValidateRulesMin %>')
		})
	<%_ } _%>
	<%_ if (field.fieldTypeNumeric && field.fieldValidationMax) { _%>

		cy.getByTestId('add<%= entityAngularName %>Form').within(() => {
			cy.getByName('<%= field.fieldName %>').within(() => {
				cy.root().type(
					'<%= Number(field.fieldValidateRulesMax) + 1 %>'
				)
				cy.root().blur()
			})
			cy.getByTestId('<%= field.fieldName %>-error')
			.should('be.visible')
			.and('contain', '<%= field.fieldNameHumanized %> cannot be more than <%= field.fieldValidateRulesMax %>')
		})
	<%_ } _%>
<%_ 	} _%>
	})

<%_ } _%>
	it('should navigate back to the <%= entityInstance %> list page', () => {
		cy.getByName('cancelBtn').click()

		cy.location('pathname')
			.should('eq', '/entities/<%= entityFolderName %>')
			.getByTestId('<%= entityInstance %>Title')
			.should('be.visible')
			.should('contain', '<%= entityClassPluralHumanized %>')
	})
})
